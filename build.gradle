plugins {
    id 'java-library'
    id 'maven-publish'
    id 'io.freefair.lombok' version libs.versions.delombok
}

group = 'it.fulminazzo'
version = '3.6'

allprojects {

    this.ext.getParentFromProject = { project ->
        return new HashMap<>(project.getProperties()).get("parent")
    }

    this.ext.getProjectGroupId = {
        String groupId = ""
        Project tmp = parent
        while (tmp != null) {
            groupId = "${tmp.name}.${groupId}"
            tmp = getParentFromProject(tmp)
        }
        if (groupId.size() > 0)
            groupId = "." + groupId.substring(0, groupId.length() - 1)
        return "${rootProject.group}${groupId}"
    }

    this.ext.getAppropriateJavaVersion = {
        if (project.name.isNumber()) {
            def module = project.name as Integer
            if (module >= 20) return 17
        }
        return project.name == 'jbukkit' ? 17 : 8
    }

    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'io.freefair.lombok'

    group = "${rootProject.group}"
    version = "${rootProject.version}"

    repositories {
        mavenCentral()
        maven { url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
        maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url = 'https://oss.sonatype.org/content/repositories/central' }
        maven { url = 'https://repo.fulminazzo.it/releases/' }
    }

    dependencies {
        compileOnly libs.lombok
        annotationProcessor libs.lombok
        compileOnly libs.annotations
        annotationProcessor libs.annotations
        testCompileOnly libs.annotations

        api libs.fulmicollection
        implementation libs.mockito

        if (project.name != 'base') api project(':base')

        compileOnly platform(libs.junit.platform)
        compileOnly 'org.junit.jupiter:junit-jupiter'

        testImplementation platform(libs.junit.platform)
        testImplementation 'org.junit.jupiter:junit-jupiter'
    }

    test {
        useJUnitPlatform()
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(getAppropriateJavaVersion())
        }
    }

    tasks.register('sourcesJar', Jar) {
        from sourceSets.main.allSource
        archiveClassifier = 'sources'
    }

    tasks.register('javadocJar', Jar) {
        from javadoc
        archiveClassifier = 'javadoc'
    }

    publishing {
        publications {
            maven(MavenPublication) {
                groupId = getProjectGroupId().toLowerCase()
                artifactId = "${project.name.toLowerCase()}"
                version = "${rootProject.version}"

                from components.java
                artifact sourcesJar
                artifact javadocJar
            }
        }

        repositories {
            maven {
                url "https://repo.fulminazzo.it/releases"
                credentials {
                    username = System.getenv("REPO_USERNAME")
                    password = System.getenv("REPO_PASSWORD")
                }
                authentication {
                    basic(BasicAuthentication)
                }
            }
        }
    }
}

/**
 * Creates a new module from the given MODULE_NUMBER environment variable.
 * WARNING: this will OVERWRITE any existing .java file.
 */
tasks.register('generateModule') {
    doLast {
        def module = System.getenv('MODULE_NUMBER')
        if (module == null)
            throw new RuntimeException('Invalid usage of task. Specify a "MODULE_NUMBER" environment variable before using generateModule')
        ModuleUtils.generateModule(Integer.valueOf(module))
    }
}

/**
 * Verifies that in every module are absent repetitions of classes.
 */
tasks.register('cleanModules') {
    doLast {
        def parent = new File(System.getProperty("user.dir"))
        def start = 8
        do {
            ModuleUtils.checkModuleRepetitions(start)
            start++
        } while (new File(parent, String.valueOf(start)).isDirectory())
    }
}

dependencies {
    subprojects.forEach { api project(it.path) }
}

